{
  "list": [
    {
      "characterId": 59630,
      "noteId": 4,
      "linkItemType": null,
      "linkKey": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "deleted": false,
      "locked": false,
      "contractAddress": "0x0000000000000000000000000000000000000000",
      "uri": "ipfs://QmeyAti1QEC4DCar8LByuJkh3haLAWo6EFo9Uy2tvf48Uv",
      "operator": "0xbbc2918c9003d264c25ecae45b44a846702c0e7c",
      "owner": "0x9ba6564ee8bb58bc7759c39ee7ac89a4a67c7b6e",
      "createdAt": "2024-05-26T10:24:13.000Z",
      "updatedAt": "2024-05-26T10:24:34.000Z",
      "deletedAt": null,
      "publishedAt": "2024-05-26T10:24:09.734Z",
      "transactionHash": "0xf44e068d45bca8dfb3d01a1c2d933b976d97a3ccbd8a85e701f41f3846886533",
      "blockNumber": 66343314,
      "logIndex": 0,
      "updatedTransactionHash": "0x48b19424aedd5a70433c5b01b0ceb5fc267b2e7d6ff1f9effd245a505231a9a2",
      "updatedBlockNumber": 66343335,
      "updatedLogIndex": 0,
      "metadata": {
        "uri": "ipfs://QmeyAti1QEC4DCar8LByuJkh3haLAWo6EFo9Uy2tvf48Uv",
        "type": "NOTE",
        "content": {
          "attachments": [
            {
              "address": "ipfs://QmZT4pcdVyT7NzhfRAGWqfZqNVeujNUoPSJ7Fri6fiD1Bm",
              "mime_type": "image/webp",
              "name": "cover"
            }
          ],
          "attributes": [
            {
              "trait_type": "xlog_slug",
              "value": "how-to-run-react-source-code-repo-in-local-env"
            },
            {
              "trait_type": "xlog_disable_ai_summary",
              "value": false
            }
          ],
          "content": "## fork 官方仓库 [facebook/react](https://github.com/facebook/react)\n\n![image](ipfs://QmcsDSZx9dHhRpFbvZ48DfATf58WPWFApMEdNjAbmz8ELe)\n\n\n通常开源的项目里都有一个 [CONTRIBUTING.md](https://github.com/facebook/react/blob/main/CONTRIBUTING.md) 文件，来让其他的开发者知道如何贡献这个项目，或者看这个项目的 [.github/workflows](https://github.com/facebook/react/tree/main/.github/workflows) 里的一些运行测试、发布的 action 都可以找到运行这个项目的有效信息\n\n![image](ipfs://QmPZHL6qT2JWWdpUHo2ZDtLxvSnkNV9KjAKbiXG854fY9V)\n\n\n本地下载克隆的仓库\n```bash\ngit clone git@github.com:Debbl/react.git\n```\n\n## VSCode 环境\n\n使用 VSCode 打开\n\n```bash\ncode react\n```\n\n### 插件\n\n因为 react 是使用 [flow](https://flow.org/) 语言（类似 ts ）写的所以需要在 VSCode 提供相关语言的支持在 VSCode 中下载 flow 语言的插件 [flow-for-vscode](https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode)\n\n> .vscode/extensions.json\n```json\n{\n    \"recommendations\": [\n        \"flowtype.flow-for-vscode\"\n    ]\n}\n```\n\n### 设置\n\n在本地的打开的仓库的根目录创建下面这个文件\n>.vscode/settings.json\n```json\n{ \n    \"javascript.validate.enable\": false,\n    \"typescript.validate.enable\": false,\n    \"flow.enabled\": true,\n    \"flow.useNPMPackagedFlow\": true\n}\n```\n解释一下这里的配置，前两个是禁用默认的 js ts 检查，然后开启 flow 插件，并且使用 `node_modules` 下的 flow 运行，这两个其实是默认开启的，更多详细的配置 [flow-for-vscode#configuration](https://github.com/flow/flow-for-vscode#configuration)\n\n## 本机环境\n> 这里可以直接参考 [contribution-prerequisites](https://legacy.reactjs.org/docs/how-to-contribute.html#contribution-prerequisites) 的官方文档，但是有几个需要注意的地方\n\n![image](ipfs://QmUkjkLMegL8xJ9fL2FMfh8SCuLGMxH783y9UKHubQW9TM)\n\n- `.nvmrc` 里对应的 node 版本，最好安装对应的版本\n- `package.json` 的 `packageManager` 有对应的 yarn 版本\n- java 环境没有明确说什么版本，我这里安装的是 `java 17.0.11 2024-04-16 LTS`\n\n![image](ipfs://QmZxuLTig5LVXg5FhQeDr6kKiNqNfUkQJaPMWgCT9dwFci)\n\n- gcc 环境\n\n![image](ipfs://QmbomvCX1PQFtJpihRJ1uRmWruPubWNS5cZ41nrqmucVou)\n\n\n## 安装依赖，环境检查\n\n> 这里可以参考文档的这一部分 [sending-a-pull-request](https://legacy.reactjs.org/docs/how-to-contribute.html#sending-a-pull-request)\n\n完全使用 `yarn.lock` 安装，这里推荐一个好用的工具 [antfu-collective/ni](https://github.com/antfu-collective/ni) 直接使用 `nci` 安装，我也参考别人的项目写了一个 rust 的版本 [Debbl/nci](https://github.com/Debbl/nci)\n\n```bash\nyarn install --frozen-lockfile\n```\n\n因为我使用的是 M1 芯片，在安装的过程中遇到了几个问题\n- `/bin/sh: autoreconf: command not found` 使用 brew 安装 `brew install autoconf`\n- 如果上一步是使用 brew 安装的会遇到一个问题 [error-cant-exec-aclocal-with-homebrew-installed-autoreconf-on-mac](https://stackoverflow.com/questions/76852766/error-cant-exec-aclocal-with-homebrew-installed-autoreconf-on-mac) 需要安装 `brew install automake`\n- `optipng-bin` 依赖报错，可以看这个 [optipng-bin/issues/117](https://github.com/imagemin/optipng-bin/issues/117#issuecomment-1362473572)\n\n### 配置 flow 环境\n\n```bash\nyarn flow\n```\n\n这里直接运行这个命令会要求选择对应的环境\n\n![image](ipfs://QmerKgfnxrCS3MEWLY3hhyXU8baV4jgAxduqQVTDNoDipG)\n\n这里使用 `dom-node` 环境\n```bash\nyarn flow dom-node\n```\n执行完成之后会发现在根目录多了一个 `.flowconfig` 文件\n\n![image](ipfs://QmaspMPgycpVnupZhzvWpjKxAmnDPzM4rzdVjFjixnWPkC)\n\n### 检查 flow 有没有生效\n\n![image](ipfs://QmQa4sp3sXyBigJPrtFREdAGsSRVsw5bhrwrAHbKbC7pNo)\n\n![image](ipfs://QmWwXuTQ2MY6wJBGBSr8VM2kbqWwBnFCgrrVd3eNBaLjwx)\n\n![image](ipfs://QmQN843uyvaXGUuKiESv7RjyciDsUH9pPpd9yTk7zwL9Jn)\n\n![image](ipfs://QmSBfqz3f7Wkn59eiX6pJKjD1cf4mKf8jgPxVf4TZqixmm)\n\n\n完成之后 VSCode 就会有提示了\n\n## 测试，本地运行\n\n```bash\nyarn test\n```\n\n![image](ipfs://QmbNyRdXGQtvEBj3pA9NP455sPjssnAHTyTkH47f5XsuQN)\n\n\n## 本地运行打包好的 react\n\n> 可以参考文档的 [development-workflow](https://legacy.reactjs.org/docs/how-to-contribute.html#development-workflow)\n\n![image](ipfs://QmPFc2xmfiWsZ2VATAqGo5dMZYxPFWg3xQiK6opKVB2MXo)\n\n\n```bash\ncd build/oss-experimental/react\nyarn link\n\ncd build/oss-experimental/react-dom\nyarn link\n```\n\n这里注意 node 环境的话需要 link 三个仓库 `react` `react-dom` `scheduler`\n\n也可以直接使用 `fixtures` 目录的环境，这里我使用 `fixtures/packaging/webpack/dev`\n\n```bash\ncd fixtures/packaging/webpack/dev\n\nyarn\n\nyarn build\n```\n\n这里需要替换一下 `input.js` 文件，新版 ReactDom 里没有 render 函数了\n\n>fixtures/packaging/webpack/dev/input.js\n```js\nvar React = require('react');\nvar ReactDOM = require('react-dom');\n\nReactDOM.render(\n  React.createElement('h1', null, 'Hello World!'),\n  document.getElementById('container')\n);\n\n```\n```js\nvar React = require('react');\nvar {createRoot} = require('react-dom/client');\n\nconsole.log('react version:', React.version);\n\nconst root = createRoot(document.getElementById('container'));\nroot.render(React.createElement('h1', null, 'Hello World!'));\n\n```\n\n使用 [LiveServer](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer)打开 `fixtures/packaging/webpack/dev/index.html`\n\n![image](ipfs://QmeyKSBXnpdPUivN7owwis8kz2DxnjAk9JyD3PVMENU59v)\n",
          "date_published": "2024-05-26T10:24:09.734Z",
          "sources": [
            "xlog"
          ],
          "summary": "克隆官方仓库facebook/react并在本地环境中配置VSCode以支持flow语言插件。安装必要的依赖并进行环境检查，配置flow环境并检查是否生效。进行测试和本地运行，最后链接react和react-dom仓库。",
          "tags": [
            "post",
            "blog",
            "react"
          ],
          "title": "如何在本地环境运行 react 源码仓库",
          "type": "note",
          "duration": 19,
          "slug": "how-to-run-react-source-code-repo-in-local-env",
          "html": "<h2>fork 官方仓库 <a href=\"https://github.com/facebook/react\">facebook/react</a></h2>\n<p><img src=\"https://ipfs.crossbell.io/ipfs/QmcsDSZx9dHhRpFbvZ48DfATf58WPWFApMEdNjAbmz8ELe\" alt=\"image\"></p>\n<p>通常开源的项目里都有一个 <a href=\"https://github.com/facebook/react/blob/main/CONTRIBUTING.md\">CONTRIBUTING.md</a> 文件，来让其他的开发者知道如何贡献这个项目，或者看这个项目的 <a href=\"https://github.com/facebook/react/tree/main/.github/workflows\">.github/workflows</a> 里的一些运行测试、发布的 action 都可以找到运行这个项目的有效信息</p>\n<p><img src=\"https://ipfs.crossbell.io/ipfs/QmPZHL6qT2JWWdpUHo2ZDtLxvSnkNV9KjAKbiXG854fY9V\" alt=\"image\"></p>\n<p>本地下载克隆的仓库</p>\n<pre><code class=\"language-bash\">git clone git@github.com:Debbl/react.git\n</code></pre>\n<h2>VSCode 环境</h2>\n<p>使用 VSCode 打开</p>\n<pre><code class=\"language-bash\">code react\n</code></pre>\n<h3>插件</h3>\n<p>因为 react 是使用 <a href=\"https://flow.org/\">flow</a> 语言（类似 ts ）写的所以需要在 VSCode 提供相关语言的支持在 VSCode 中下载 flow 语言的插件 <a href=\"https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode\">flow-for-vscode</a></p>\n<blockquote>\n<p>.vscode/extensions.json</p>\n</blockquote>\n<pre><code class=\"language-json\">{\n    &quot;recommendations&quot;: [\n        &quot;flowtype.flow-for-vscode&quot;\n    ]\n}\n</code></pre>\n<h3>设置</h3>\n<p>在本地的打开的仓库的根目录创建下面这个文件</p>\n<blockquote>\n<p>.vscode/settings.json</p>\n</blockquote>\n<pre><code class=\"language-json\">{ \n    &quot;javascript.validate.enable&quot;: false,\n    &quot;typescript.validate.enable&quot;: false,\n    &quot;flow.enabled&quot;: true,\n    &quot;flow.useNPMPackagedFlow&quot;: true\n}\n</code></pre>\n<p>解释一下这里的配置，前两个是禁用默认的 js ts 检查，然后开启 flow 插件，并且使用 <code>node_modules</code> 下的 flow 运行，这两个其实是默认开启的，更多详细的配置 <a href=\"https://github.com/flow/flow-for-vscode#configuration\">flow-for-vscode#configuration</a></p>\n<h2>本机环境</h2>\n<blockquote>\n<p>这里可以直接参考 <a href=\"https://legacy.reactjs.org/docs/how-to-contribute.html#contribution-prerequisites\">contribution-prerequisites</a> 的官方文档，但是有几个需要注意的地方</p>\n</blockquote>\n<p><img src=\"https://ipfs.crossbell.io/ipfs/QmUkjkLMegL8xJ9fL2FMfh8SCuLGMxH783y9UKHubQW9TM\" alt=\"image\"></p>\n<ul>\n<li><code>.nvmrc</code> 里对应的 node 版本，最好安装对应的版本</li>\n<li><code>package.json</code> 的 <code>packageManager</code> 有对应的 yarn 版本</li>\n<li>java 环境没有明确说什么版本，我这里安装的是 <code>java 17.0.11 2024-04-16 LTS</code></li>\n</ul>\n<p><img src=\"https://ipfs.crossbell.io/ipfs/QmZxuLTig5LVXg5FhQeDr6kKiNqNfUkQJaPMWgCT9dwFci\" alt=\"image\"></p>\n<ul>\n<li>gcc 环境</li>\n</ul>\n<p><img src=\"https://ipfs.crossbell.io/ipfs/QmbomvCX1PQFtJpihRJ1uRmWruPubWNS5cZ41nrqmucVou\" alt=\"image\"></p>\n<h2>安装依赖，环境检查</h2>\n<blockquote>\n<p>这里可以参考文档的这一部分 <a href=\"https://legacy.reactjs.org/docs/how-to-contribute.html#sending-a-pull-request\">sending-a-pull-request</a></p>\n</blockquote>\n<p>完全使用 <code>yarn.lock</code> 安装，这里推荐一个好用的工具 <a href=\"https://github.com/antfu-collective/ni\">antfu-collective/ni</a> 直接使用 <code>nci</code> 安装，我也参考别人的项目写了一个 rust 的版本 <a href=\"https://github.com/Debbl/nci\">Debbl/nci</a></p>\n<pre><code class=\"language-bash\">yarn install --frozen-lockfile\n</code></pre>\n<p>因为我使用的是 M1 芯片，在安装的过程中遇到了几个问题</p>\n<ul>\n<li><code>/bin/sh: autoreconf: command not found</code> 使用 brew 安装 <code>brew install autoconf</code></li>\n<li>如果上一步是使用 brew 安装的会遇到一个问题 <a href=\"https://stackoverflow.com/questions/76852766/error-cant-exec-aclocal-with-homebrew-installed-autoreconf-on-mac\">error-cant-exec-aclocal-with-homebrew-installed-autoreconf-on-mac</a> 需要安装 <code>brew install automake</code></li>\n<li><code>optipng-bin</code> 依赖报错，可以看这个 <a href=\"https://github.com/imagemin/optipng-bin/issues/117#issuecomment-1362473572\">optipng-bin/issues/117</a></li>\n</ul>\n<h3>配置 flow 环境</h3>\n<pre><code class=\"language-bash\">yarn flow\n</code></pre>\n<p>这里直接运行这个命令会要求选择对应的环境</p>\n<p><img src=\"https://ipfs.crossbell.io/ipfs/QmerKgfnxrCS3MEWLY3hhyXU8baV4jgAxduqQVTDNoDipG\" alt=\"image\"></p>\n<p>这里使用 <code>dom-node</code> 环境</p>\n<pre><code class=\"language-bash\">yarn flow dom-node\n</code></pre>\n<p>执行完成之后会发现在根目录多了一个 <code>.flowconfig</code> 文件</p>\n<p><img src=\"https://ipfs.crossbell.io/ipfs/QmaspMPgycpVnupZhzvWpjKxAmnDPzM4rzdVjFjixnWPkC\" alt=\"image\"></p>\n<h3>检查 flow 有没有生效</h3>\n<p><img src=\"https://ipfs.crossbell.io/ipfs/QmQa4sp3sXyBigJPrtFREdAGsSRVsw5bhrwrAHbKbC7pNo\" alt=\"image\"></p>\n<p><img src=\"https://ipfs.crossbell.io/ipfs/QmWwXuTQ2MY6wJBGBSr8VM2kbqWwBnFCgrrVd3eNBaLjwx\" alt=\"image\"></p>\n<p><img src=\"https://ipfs.crossbell.io/ipfs/QmQN843uyvaXGUuKiESv7RjyciDsUH9pPpd9yTk7zwL9Jn\" alt=\"image\"></p>\n<p><img src=\"https://ipfs.crossbell.io/ipfs/QmSBfqz3f7Wkn59eiX6pJKjD1cf4mKf8jgPxVf4TZqixmm\" alt=\"image\"></p>\n<p>完成之后 VSCode 就会有提示了</p>\n<h2>测试，本地运行</h2>\n<pre><code class=\"language-bash\">yarn test\n</code></pre>\n<p><img src=\"https://ipfs.crossbell.io/ipfs/QmbNyRdXGQtvEBj3pA9NP455sPjssnAHTyTkH47f5XsuQN\" alt=\"image\"></p>\n<h2>本地运行打包好的 react</h2>\n<blockquote>\n<p>可以参考文档的 <a href=\"https://legacy.reactjs.org/docs/how-to-contribute.html#development-workflow\">development-workflow</a></p>\n</blockquote>\n<p><img src=\"https://ipfs.crossbell.io/ipfs/QmPFc2xmfiWsZ2VATAqGo5dMZYxPFWg3xQiK6opKVB2MXo\" alt=\"image\"></p>\n<pre><code class=\"language-bash\">cd build/oss-experimental/react\nyarn link\n\ncd build/oss-experimental/react-dom\nyarn link\n</code></pre>\n<p>这里注意 node 环境的话需要 link 三个仓库 <code>react</code> <code>react-dom</code> <code>scheduler</code></p>\n<p>也可以直接使用 <code>fixtures</code> 目录的环境，这里我使用 <code>fixtures/packaging/webpack/dev</code></p>\n<pre><code class=\"language-bash\">cd fixtures/packaging/webpack/dev\n\nyarn\n\nyarn build\n</code></pre>\n<p>这里需要替换一下 <code>input.js</code> 文件，新版 ReactDom 里没有 render 函数了</p>\n<blockquote>\n<p>fixtures/packaging/webpack/dev/input.js</p>\n</blockquote>\n<pre><code class=\"language-js\">var React = require('react');\nvar ReactDOM = require('react-dom');\n\nReactDOM.render(\n  React.createElement('h1', null, 'Hello World!'),\n  document.getElementById('container')\n);\n\n</code></pre>\n<pre><code class=\"language-js\">var React = require('react');\nvar {createRoot} = require('react-dom/client');\n\nconsole.log('react version:', React.version);\n\nconst root = createRoot(document.getElementById('container'));\nroot.render(React.createElement('h1', null, 'Hello World!'));\n\n</code></pre>\n<p>使用 <a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\">LiveServer</a>打开 <code>fixtures/packaging/webpack/dev/index.html</code></p>\n<p><img src=\"https://ipfs.crossbell.io/ipfs/QmeyKSBXnpdPUivN7owwis8kz2DxnjAk9JyD3PVMENU59v\" alt=\"image\"></p>\n"
        },
        "status": "SUCCESS"
      }
    },
    {
      "characterId": 59630,
      "noteId": 3,
      "linkItemType": null,
      "linkKey": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "deleted": false,
      "locked": false,
      "contractAddress": "0x0000000000000000000000000000000000000000",
      "uri": "ipfs://QmRDqKxX8oeMwK7BBae1y4GtSaDLg4DUBCozE1PRshVxot",
      "operator": "0x9ba6564ee8bb58bc7759c39ee7ac89a4a67c7b6e",
      "owner": "0x9ba6564ee8bb58bc7759c39ee7ac89a4a67c7b6e",
      "createdAt": "2024-01-14T08:20:13.000Z",
      "updatedAt": "2024-01-14T08:20:13.000Z",
      "deletedAt": null,
      "publishedAt": "2024-01-14T08:20:04.915Z",
      "transactionHash": "0x5fc99919a83903f3da0c3312fa87f3964f0c2511715a2921f9bd692a6b628acb",
      "blockNumber": 54844685,
      "logIndex": 0,
      "updatedTransactionHash": "0x5fc99919a83903f3da0c3312fa87f3964f0c2511715a2921f9bd692a6b628acb",
      "updatedBlockNumber": 54844685,
      "updatedLogIndex": 0,
      "metadata": {
        "uri": "ipfs://QmRDqKxX8oeMwK7BBae1y4GtSaDLg4DUBCozE1PRshVxot",
        "type": "NOTE",
        "content": {
          "attachments": [],
          "attributes": [
            {
              "trait_type": "xlog_slug",
              "value": "preload-and-prefetch"
            }
          ],
          "content": "## preload\n\n`<link rel=\"preload\">` is used to preload resources that are needed for `the current page`, and it is loaded before the browser parses the HTML document.\n\n```html\n<link rel=\"preload\" href=\"https://example.com/image.png\" as=\"image\" />\n```\n\n## prefetch\n\n`<link rel=\"prefetch\">` is used to prefetch resources that will be needed for `the future pages`, and it is loaded after the browser parses the HTML document.\n\n```html\n<link rel=\"prefetch\" href=\"https://example.com/image.png\" as=\"image\" />\n```\n\n## preload vs prefetch\n\n- preload is used to load resources that are needed for the current page, and it is loaded before the browser parses the HTML document.\n- prefetch is used to load resources that will be needed for future pages, and it is loaded after the browser parses the HTML document.\n- preload priority is higher than prefetch\n\n## reference\n\n- [https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload)\n- [https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/prefetch](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/prefetch)\n",
          "date_published": "2024-01-14T08:20:04.915Z",
          "sources": [
            "xlog"
          ],
          "summary": "preload（预加载）是用于预加载当前页面所需资源的，它在浏览器解析HTML文档之前加载。\nprefetch（预取）是用于预取将来页面所需资源的，它在浏览器解析HTML文档之后加载。\npreload用于加载当前页面所需资源，它的优先级高于prefetch。",
          "tags": [
            "post",
            "TIL"
          ],
          "title": "preload and prefetch",
          "type": "note",
          "duration": 5,
          "slug": "preload-and-prefetch",
          "html": "<h2>preload</h2>\n<p><code>&lt;link rel=&quot;preload&quot;&gt;</code> is used to preload resources that are needed for <code>the current page</code>, and it is loaded before the browser parses the HTML document.</p>\n<pre><code class=\"language-html\">&lt;link rel=&quot;preload&quot; href=&quot;https://example.com/image.png&quot; as=&quot;image&quot; /&gt;\n</code></pre>\n<h2>prefetch</h2>\n<p><code>&lt;link rel=&quot;prefetch&quot;&gt;</code> is used to prefetch resources that will be needed for <code>the future pages</code>, and it is loaded after the browser parses the HTML document.</p>\n<pre><code class=\"language-html\">&lt;link rel=&quot;prefetch&quot; href=&quot;https://example.com/image.png&quot; as=&quot;image&quot; /&gt;\n</code></pre>\n<h2>preload vs prefetch</h2>\n<ul>\n<li>preload is used to load resources that are needed for the current page, and it is loaded before the browser parses the HTML document.</li>\n<li>prefetch is used to load resources that will be needed for future pages, and it is loaded after the browser parses the HTML document.</li>\n<li>preload priority is higher than prefetch</li>\n</ul>\n<h2>reference</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload\">https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/prefetch\">https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/prefetch</a></li>\n</ul>\n"
        },
        "status": "SUCCESS"
      }
    },
    {
      "characterId": 59630,
      "noteId": 2,
      "linkItemType": null,
      "linkKey": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "deleted": false,
      "locked": false,
      "contractAddress": "0x0000000000000000000000000000000000000000",
      "uri": "ipfs://QmQwrkeXX2WN9tBb6towRLR6rGrEApNmJHaX287yeA9XPT",
      "operator": "0x9ba6564ee8bb58bc7759c39ee7ac89a4a67c7b6e",
      "owner": "0x9ba6564ee8bb58bc7759c39ee7ac89a4a67c7b6e",
      "createdAt": "2024-01-14T07:36:27.000Z",
      "updatedAt": "2024-01-14T08:49:06.000Z",
      "deletedAt": null,
      "publishedAt": "2024-01-14T07:36:19.342Z",
      "transactionHash": "0x50c59241f8fe48e3a2e412fc9ea757feea323c25c1145499d3301a222cca9f57",
      "blockNumber": 54842059,
      "logIndex": 0,
      "updatedTransactionHash": "0xdf6085d64b3bbb07538b516101901c66bec105cf2f13bfe46c35d2845ef895a5",
      "updatedBlockNumber": 54846418,
      "updatedLogIndex": 0,
      "metadata": {
        "uri": "ipfs://QmQwrkeXX2WN9tBb6towRLR6rGrEApNmJHaX287yeA9XPT",
        "type": "NOTE",
        "content": {
          "attachments": [
            {
              "address": "",
              "mime_type": "",
              "name": "cover"
            }
          ],
          "attributes": [
            {
              "trait_type": "xlog_slug",
              "value": "mdx-test"
            },
            {
              "trait_type": "xlog_disable_ai_summary",
              "value": false
            }
          ],
          "content": "> info\n\n# h1\n\n<Sandpack template=\"react\">\n\n```js filename=\"App.js\"\nimport React from \"react\";\nexport default function App() {\n  return <div>hi</div>;\n}\n```\n\n```js filename=\"t.js\"\nconsole.log(112);\n```\n\n</Sandpack>\n\n# aaaa\n\n<Sandpack>\n\n```js filename=\"index.js\"\nconsole.log(1);\n```\n\n</Sandpack>",
          "date_published": "2024-01-14T07:36:19.342Z",
          "sources": [
            "xlog"
          ],
          "summary": "这段代码是一个React组件，名为App。它导出一个默认函数，返回一个字符串hi。代码中还包含两个console.log语句，分别输出112和1。",
          "tags": [
            "post",
            "blog"
          ],
          "title": "MDX 测试",
          "type": "note",
          "duration": 2,
          "slug": "mdx-test",
          "html": "<blockquote>\n<p>info</p>\n</blockquote>\n<h1>h1</h1>\n<Sandpack template=\"react\">\n<pre><code class=\"language-js\">import React from &quot;react&quot;;\nexport default function App() {\n  return &lt;div&gt;hi&lt;/div&gt;;\n}\n</code></pre>\n<pre><code class=\"language-js\">console.log(112);\n</code></pre>\n</Sandpack>\n<h1>aaaa</h1>\n<Sandpack>\n<pre><code class=\"language-js\">console.log(1);\n</code></pre>\n</Sandpack>"
        },
        "status": "SUCCESS"
      }
    },
    {
      "characterId": 59630,
      "noteId": 1,
      "linkItemType": null,
      "linkKey": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "deleted": false,
      "locked": false,
      "contractAddress": "0x0000000000000000000000000000000000000000",
      "uri": "ipfs://QmSfveM2kjtnHXNE1rYFRmF5KmaNcZMqCLnxY4GRkrBDxb",
      "operator": "0x9ba6564ee8bb58bc7759c39ee7ac89a4a67c7b6e",
      "owner": "0x9ba6564ee8bb58bc7759c39ee7ac89a4a67c7b6e",
      "createdAt": "2024-01-14T03:29:13.000Z",
      "updatedAt": "2024-01-20T03:43:53.000Z",
      "deletedAt": null,
      "publishedAt": "2024-01-14T03:28:59.079Z",
      "transactionHash": "0x153c7a148ac6891124990728fb3028026b0204cf9b3fa0ad2d6c2b23deca19f0",
      "blockNumber": 54827225,
      "logIndex": 0,
      "updatedTransactionHash": "0xf4ffa614707f382bd402262880b0f1a82129b0efb7711a6770b2bfe6b54df1d1",
      "updatedBlockNumber": 55346505,
      "updatedLogIndex": 0,
      "metadata": {
        "uri": "ipfs://QmSfveM2kjtnHXNE1rYFRmF5KmaNcZMqCLnxY4GRkrBDxb",
        "type": "NOTE",
        "content": {
          "attachments": [
            {
              "address": "",
              "mime_type": "",
              "name": "cover"
            }
          ],
          "attributes": [
            {
              "trait_type": "xlog_slug",
              "value": "windows-git-set-eol-to-lf"
            },
            {
              "trait_type": "xlog_disable_ai_summary",
              "value": false
            }
          ],
          "content": "## 原因\n在写 [Debbl/eslint-config](https://github.com/Debbl/eslint-config) 的测试时\n\n```ts filename=\"fixture.text.ts\"\nawait Promise.all(\n  files.map(async (file) => {\n    let content = await fs.readFile(join(target, file), \"utf-8\");\n    const source = await fs.readFile(join(from, file), \"utf-8\");\n\n    if (content === source) {\n      content = \"// unchanged\\n\";\n    }\n\n    await expect.soft(content).toMatchFileSnapshot(join(output, file));\n  }),\n);\n```\n\n在 github action 中有使用多个系统的测试\n\n```yml\nstrategy:\n  matrix:\n    node: [lts/*]\n    os: [ubuntu-latest, windows-latest, macos-latest]\n  fail-fast: false\n```\n\n但是在测试 windows 时总是报错 [test](https://github.com/Debbl/eslint-config/actions/runs/6914251251/job/18811912790)，显示 input 和 output 不符合，在测试后发现是 windows 默认的在 git 下载是的 `eol` 是 `crlf`\n\n所以搜了一下在 GitHub Action 如何设置 `eol` 为 `lf` [actions/checkout#135](https://github.com/actions/checkout/issues/135)\n\n最终添加如下命令 [ci.yml](https://github.com/Debbl/eslint-config/blob/main/.github/workflows/ci.yml)\n\nwindows 可以通过以下命令设置为 `lf`\n\n```bash\ngit config --global core.autocrlf false\ngit config --global core.eol lf\n```\n\n```yml\n- name: Set git to use LF\n  run: |\n    git config --global core.autocrlf false\n    git config --global core.eol lf\n```\n\n## 通过 `.gitattributes` 设置\n\n```\n* text=auto eol=lf\n```\n\n## 引用\n\n- [https://git-scm.com/docs/gitattributes](https://git-scm.com/docs/gitattributes)\n",
          "date_published": "2024-01-14T03:28:59.079Z",
          "sources": [
            "xlog"
          ],
          "summary": "原因是在写Debbl/eslint-config的测试时，发现在测试Windows系统时总是报错，显示输入和输出不符合。经过测试发现是因为Windows默认在Git下载时的行尾符是CRLF。为了解决这个问题，在GitHub Action中添加了设置行尾符为LF的命令，并通过.gitattributes文件设置了text=auto eol=lf。参考了actions/checkout#135和https://git-scm.com/docs/gitattributes。",
          "tags": [
            "post",
            "TIL"
          ],
          "title": "windows git set eol to lf",
          "type": "note",
          "duration": 6,
          "slug": "windows-git-set-eol-to-lf",
          "html": "<h2>原因</h2>\n<p>在写 <a href=\"https://github.com/Debbl/eslint-config\">Debbl/eslint-config</a> 的测试时</p>\n<pre><code class=\"language-ts\">await Promise.all(\n  files.map(async (file) =&gt; {\n    let content = await fs.readFile(join(target, file), &quot;utf-8&quot;);\n    const source = await fs.readFile(join(from, file), &quot;utf-8&quot;);\n\n    if (content === source) {\n      content = &quot;// unchanged\\n&quot;;\n    }\n\n    await expect.soft(content).toMatchFileSnapshot(join(output, file));\n  }),\n);\n</code></pre>\n<p>在 github action 中有使用多个系统的测试</p>\n<pre><code class=\"language-yml\">strategy:\n  matrix:\n    node: [lts/*]\n    os: [ubuntu-latest, windows-latest, macos-latest]\n  fail-fast: false\n</code></pre>\n<p>但是在测试 windows 时总是报错 <a href=\"https://github.com/Debbl/eslint-config/actions/runs/6914251251/job/18811912790\">test</a>，显示 input 和 output 不符合，在测试后发现是 windows 默认的在 git 下载是的 <code>eol</code> 是 <code>crlf</code></p>\n<p>所以搜了一下在 GitHub Action 如何设置 <code>eol</code> 为 <code>lf</code> <a href=\"https://github.com/actions/checkout/issues/135\">actions/checkout#135</a></p>\n<p>最终添加如下命令 <a href=\"https://github.com/Debbl/eslint-config/blob/main/.github/workflows/ci.yml\">ci.yml</a></p>\n<p>windows 可以通过以下命令设置为 <code>lf</code></p>\n<pre><code class=\"language-bash\">git config --global core.autocrlf false\ngit config --global core.eol lf\n</code></pre>\n<pre><code class=\"language-yml\">- name: Set git to use LF\n  run: |\n    git config --global core.autocrlf false\n    git config --global core.eol lf\n</code></pre>\n<h2>通过 <code>.gitattributes</code> 设置</h2>\n<pre><code>* text=auto eol=lf\n</code></pre>\n<h2>引用</h2>\n<ul>\n<li><a href=\"https://git-scm.com/docs/gitattributes\">https://git-scm.com/docs/gitattributes</a></li>\n</ul>\n"
        },
        "status": "SUCCESS"
      }
    }
  ],
  "count": 4,
  "cursor": null
}